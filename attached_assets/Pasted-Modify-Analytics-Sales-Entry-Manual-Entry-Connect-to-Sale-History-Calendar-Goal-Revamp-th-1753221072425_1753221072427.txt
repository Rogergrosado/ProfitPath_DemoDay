Modify “Analytics & Sales Entry” – Manual Entry & Connect to Sale History Calendar
🧩 Goal
Revamp the Manual Sales Entry system in the Inventory sub-page. This form connects directly to:

Inventory metrics (stock and KPIs)

Sales history analytics

Performance sub-page (via a new Sale History Calendar, replacing Demand Forecasting)

CSV import and chart logic remain untouched. This update focuses only on Manual Entry and its backend connectivity.

✅ 1. FRONTEND TASKS – Inventory Sub-Page → Manual Sales Entry
🎯 Replace current modal fields with the following structure:
🧾 Summary – Current Status (display-only)
Product Name

SKU

Current Stock

Unit Price

✍️ User Input Fields
Quantity Sold (Required)

Unit Price (Required)

Sale Date (Required → Used in Sale History Calendar)

Notes (Optional)

📊 Sale Summary (Reactive Fields)
Total Revenue: Quantity × Unit Price

Total Cost: Quantity × Cost

Profit: Revenue – Cost

Remaining Stock: Current Stock – Quantity Sold

🚨 Warning Section (Conditional Rendering)
If the new stock is:

<= Reorder Point: Show Low Stock Alert

== 0: Show Out of Stock Warning

💡 Frontend Logic:
On submit:

Validate inputs (non-zero quantity, valid price)

Calculate summary fields in real-time

Show warning messages if applicable

Trigger POST request to backend /api/sales/manual-entry

On success:

Update:

Inventory list (stock, status)

Inventory KPI bar (Total SKUs, Value, Low Stock, Out of Stock)

Sale History Calendar on performance page

Use useQueryClient().invalidateQueries() for:

/api/inventory/list

/api/inventory/kpis

/api/sales/history

/api/performance/calendar

✅ 2. BACKEND TASKS – Manual Sale API & Calendar Integration
🛠 Endpoint: POST /api/sales/manual-entry
Request Payload:
json
Copiar
Editar
{
  "sku": "HEA-6844",
  "quantity_sold": 5,
  "unit_price": 34.99,
  "sale_date": "2025-09-01",
  "notes": "Sold via Amazon Prime"
}
Backend Workflow:
✅ Fetch current stock and product info using sku

✅ Validate that quantity sold ≤ current stock

✅ Reduce inventory stock by quantity_sold

✅ Log sale to sales_history table

✅ Add to calendar_sales table (for Sale History Calendar)

✅ Recalculate and return:

Inventory KPIs

New stock status

Product object for client update

✅ 3. DATABASE STRUCTURE
Table: sales_history
sql
Copiar
Editar
CREATE TABLE sales_history (
  id SERIAL PRIMARY KEY,
  sku VARCHAR(50),
  product_name VARCHAR(255),
  quantity_sold INTEGER,
  unit_price DECIMAL(10,2),
  cost DECIMAL(10,2),
  sale_date DATE,
  notes TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Table: calendar_sales (NEW or UPDATE if exists)
sql
Copiar
Editar
CREATE TABLE calendar_sales (
  id SERIAL PRIMARY KEY,
  sku VARCHAR(50),
  product_name VARCHAR(255),
  sale_date DATE,
  quantity INTEGER,
  total_revenue DECIMAL(10,2)
);
🧠 Use calendar_sales for rendering calendar events.

✅ 4. KPI Recalculation Logic
After any manual sale, backend must update:

Total SKUs → Count of distinct active SKUs

Total Value → Sum of (current stock × selling_price)

Low Stock Alerts → Count where stock ≤ reorder_point

Out of Stock → Count where stock = 0

Expose or reuse endpoint:

GET /api/inventory/kpis

✅ 5. PERFORMANCE SUB-PAGE — Sale History Calendar
🎯 Replace: Demand Forecasting
Delete any unused chart or placeholder

🆕 Add: Sale History Calendar
Component: react-calendar, fullcalendar.io, or custom grid

Source: Query /api/calendar/sales?month=YYYY-MM or equivalent

Each Date Cell: Display:

Total Revenue for that date

On click, modal opens:

All sales recorded that day

Quantity, Revenue, Product

💾 State & Data Flow Summary
Component	Trigger	Action
Manual Sale Modal	Submit	Call /api/sales/manual-entry
Inventory Table	Response	Update stock + status
Inventory KPI Bar	Response	Refresh KPIs
Performance Page Calendar	Response	Refresh calendar view
Calendar Data	GET /api/calendar/sales	Render daily totals

✅ Optional Enhancements (Suggested)
Show toast notification upon successful entry

Add undo option for accidental entry

Support search by product in Sale History Calendar (later)