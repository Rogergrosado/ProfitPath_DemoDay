// 📁 models/Report.js
const mongoose = require('mongoose');

const ReportSchema = new mongoose.Schema({
  title: { type: String, required: true },
  type: { type: String, enum: ['sales', 'inventory'], required: true },
  data: { type: Array, required: true },
  createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Report', ReportSchema);

// 📁 routes/reportRoutes.js
const express = require('express');
const router = express.Router();
const Report = require('../models/Report');
const { generateSalesData, generateInventoryData } = require('../utils/reportGenerators');

// GET all reports
router.get('/', async (req, res) => {
  try {
    const reports = await Report.find();
    res.json(reports);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch reports.' });
  }
});

// POST new report
router.post('/', async (req, res) => {
  const { title, type } = req.body;
  let reportData = [];

  try {
    if (type === 'sales') {
      reportData = await generateSalesData();
    } else if (type === 'inventory') {
      reportData = await generateInventoryData();
    } else {
      return res.status(400).json({ error: 'Invalid report type.' });
    }

    const newReport = new Report({ title, type, data: reportData });
    await newReport.save();

    res.status(201).json(newReport);
  } catch (err) {
    res.status(500).json({ error: 'Failed to create report.' });
  }
});

module.exports = router;

// 📁 utils/reportGenerators.js
const generateSalesData = async () => {
  // Query your sales DB and format for report
  return [
    { date: '2025-07-01', totalSales: 1234 },
    { date: '2025-07-02', totalSales: 1456 },
    // ... more mock or real data
  ];
};

const generateInventoryData = async () => {
  // Query your inventory DB and format for report
  return [
    { sku: 'SKU001', stock: 45 },
    { sku: 'SKU002', stock: 0 },
    // ... more mock or real data
  ];
};

module.exports = { generateSalesData, generateInventoryData };
