 Breakdown of the Error
Here’s what your backend (likely using Zod or Yup schema validation) expects:

Field	Expected Type	Your Input
unitPrice	string	number (e.g., 24.99) ❌
totalRevenue	string	number ❌
totalCost	string	number ❌
profit	string	number ❌
saleDate	Date object	string (ISO string) ❌

✅ FIX (Frontend-Side)
Update your saleData payload so that:

Numbers are stringified (if backend expects strings for financials)

Dates are passed as real Date objects (not just strings)

🔧 Updated handleSaleSubmit() Patch:
tsx
Copiar
Editar
const saleData = {
  sku: formData.sku,
  saleDate: new Date(formData.date), // convert string → Date
  unitsSold: parseInt(formData.unitsSold),
  unitPrice: formData.price.toFixed(2).toString(),  // string
  totalRevenue: (formData.unitsSold * formData.price).toFixed(2).toString(),
  totalCost: (formData.unitsSold * formData.costPrice).toFixed(2).toString(),
  profit: ((formData.unitsSold * (formData.price - formData.costPrice))).toFixed(2).toString()
};
⚠️ Adjust field names (unitPrice, totalRevenue, etc.) based on what your backend API expects exactly.

✅ Backend Fix Option (Alternative)
If possible, update your validation schema to accept native types and coerce values, like this in Zod:

ts
Copiar
Editar
z.object({
  unitPrice: z.string().or(z.number()).transform(val => parseFloat(val)),
  saleDate: z.coerce.date(),
  ...
})
🧪 Recap
Problem	Fix
unitPrice, totalRevenue, etc. expected as strings	Use .toFixed(2).toString()
saleDate expected as Date, not string	Use new Date()
Zod/Yup fails on wrong types	Either coerce on backend or sanitize on frontend

Would you like me to rewrite the full handleSaleSubmit() again now that we know the exact backend requirements?








Dijiste:
yes


ChatGPT dijo:
Here’s the fully revised and Replit-ready handleSaleSubmit() function based on your backend requirements:

✅ Final Version of handleSaleSubmit() (Corrected Types)
tsx
Copiar
Editar
import axios from 'axios';

async function handleSaleSubmit(formData, closeModal, refreshData) {
  const {
    sku,
    date,
    unitsSold,
    price,
    costPrice // include this in your form if you want to calculate profit/cost
  } = formData;

  if (!sku || !date || !unitsSold || !price || !costPrice) {
    alert('Please fill out all required fields: SKU, Date, Units Sold, Price, and Cost.');
    return;
  }

  const units = parseInt(unitsSold);
  const unitPrice = parseFloat(price);
  const unitCost = parseFloat(costPrice);

  if (isNaN(units) || isNaN(unitPrice) || isNaN(unitCost) || units <= 0 || unitPrice <= 0) {
    alert('Enter valid numbers for Units Sold, Price, and Cost.');
    return;
  }

  // Prepare payload with correct types for backend validation
  const saleData = {
    sku,
    saleDate: new Date(date), // must be a real Date object
    unitsSold: units,
    unitPrice: unitPrice.toFixed(2).toString(),         // string
    totalRevenue: (units * unitPrice).toFixed(2).toString(), // string
    totalCost: (units * unitCost).toFixed(2).toString(),      // string
    profit: ((units * (unitPrice - unitCost)).toFixed(2)).toString() // string
  };

  console.log('📤 Submitting inventory sale:', saleData);

  try {
    const res = await axios.post('/api/sales-entry', saleData);
    console.log('✅ Sale recorded:', res.data);
    alert('Sale recorded successfully!');
    closeModal();
    refreshData(); // refresh analytics or performance data
  } catch (error) {
    console.error('❌ Error recording inventory sale:', error.response?.data || error.message);
    alert('Failed to record sale. Check inputs or contact support.');
  }
}
🧩 Additional Notes
Field	Description
saleDate	Must be passed as a real Date object (new Date(date))
unitPrice, totalRevenue, totalCost, profit	Must be strings with decimal format ("12.99")
axios.post(...)	Should point to your /api/sales-entry or /api/sales endpoint, depending on how you named it

🧪 Example Form Setup
In your modal component:

tsx
Copiar
Editar
<form onSubmit={(e) => {
  e.preventDefault();
  handleSaleSubmit(formData, () => setShowModal(false), fetchPerformanceMetrics);
}}>
Let me know if you'd like me to generate a prefilled CSV template based on this format, or build the matching backend POST /api/sales-entry handler.