‚úÖ 1. CSV Parsing and Normalization
You must handle multi-row, multi-format CSV files and normalize data from 3 different sources:

CSV Type	Expected Content	Required Actions
‚úÖ Product CSV	Product Name, SKU, Category, Price, Cost, Supplier, Stock	Create new inventory item or update existing
‚úÖ Sales CSV	SKU, Date, Units Sold, Price	Add to SalesEntry table; recalculate profit, margin, etc.
‚úÖ Mixed CSV	Both product & sales fields	Split the parser into two: inventory updater and sales recorder

üß† Backend Mathematical Logic
Detect duplicates by SKU: if (db.has(SKU)) then update else create

Handle optional fields (like supplier SKU, lead time) with defaults

Validate field formats (date, number types, etc.)

Aggregate values for summaries if unitsSold already exists

‚úÖ 2. Mathematical Modeling for Profit & Forecasting
When promoting a product from watchlist to inventory or uploading a sales CSV, you need the following real-time calculations:

Metric	Formula
Total Revenue	unitsSold * sellingPrice
Total Cost	unitsSold * costPrice
Profit	Total Revenue - Total Cost
Margin %	(Profit / Total Revenue) * 100
Stock Forecasting	Current Stock / Avg Daily Sales = Days Left
Reorder Signal	If Current Stock <= Reorder Point ‚Üí Alert

‚úÖ 3. Performance Trigger & Conditional Navigation
When the user:

Inputs a sale manually or via CSV

Or inputs analytics via modal

Then:

ts
Copiar
Editar
if (sales.length > 0 || performanceMetricsExist) {
  showSidebarItems(['Dashboard', 'Goals', 'Performance']);
}
You need to watch the SalesEntry table or cache for the user and toggle visibility of those pages when data exists.

‚úÖ 4. Frontend Table Math
Each row in your Inventory and Performance pages may require live calculated fields:

Page	Example Calculations
Inventory	Margin per SKU ‚Üí (SellingPrice - CostPrice) / SellingPrice * 100
Performance	Category Revenue Totals, Profit Trends over 7d/30d
Reports	Sort by Total Revenue or ROI

‚úÖ 5. Product-State Sync
Promoting a product from Watchlist to Inventory must:

Transfer and persist fields: name, SKU, category, etc.

Fill missing fields (supplierName, leadTime) via modal

Move the record between two lists or collections in database

This is a state transition:
watchlist -> inventory -> performance

‚úÖ 6. CSV Sync Conflict Prevention
To support:

Add Product

Add Sales

Add Both

You need to:

Detect column headers and choose correct importer

Track imported SKU list and resolve duplicates

Split logic in backend:

ts
Copiar
Editar
if (csv.has('unitsSold')) {
   // it's sales
} else {
   // it's product inventory
}
‚úÖ 7. Aggregate Analytics
From /performance, you‚Äôll need to run aggregation queries like:

sql
Copiar
Editar
SELECT 
  sku,
  SUM(unitsSold) as totalUnits,
  SUM(unitsSold * price) as totalRevenue,
  SUM(unitsSold * cost) as totalCost,
  (SUM(unitsSold * price) - SUM(unitsSold * cost)) as profit
FROM SalesEntry
GROUP BY sku;
And date filtering like:

sql
Copiar
Editar
WHERE saleDate BETWEEN '2025-07-01' AND '2025-07-31'
üîÅ Summary of Required Implementations
Component	Required Math/Logic
CSV Parser	Smart parser with dynamic field detection
Inventory Model	Margin %, Reorder trigger logic
Performance Model	Revenue, cost, profit calc & trends
Watchlist Promotion	Field sync & validation
Navigation Trigger	Conditional visibility logic
Forecasting	Avg daily sales ‚Üí DaysLeft = stock / avgDailySales
Deduplication	SKU-based merge strategy
Validation	Type checking: date, string, number
Uploader	Add/update/split logic across 3 modes