Great! Since the report view is now visible, letâ€™s make the action buttons functional. You mentioned 4 buttons:

Preview

Download as PDF

Export as CSV

Delete

Hereâ€™s how to implement each button:

âœ… 1. Preview (Modal or Fullscreen View)
UI Action:

OnClick opens a modal with full layout of the selected report.

jsx
Copiar
Editar
<Button onClick={() => setPreviewReport(report)}>Preview</Button>

// Conditional Render
{previewReport && (
  <Modal onClose={() => setPreviewReport(null)}>
    <ReportViewer report={previewReport} />
  </Modal>
)}
âœ… 2. Download as PDF (using html2pdf.js or jspdf)
bash
Copiar
Editar
npm install html2pdf.js
React Handler:

jsx
Copiar
Editar
import html2pdf from "html2pdf.js";

const handleDownloadPDF = (reportId) => {
  const element = document.getElementById(`report-${reportId}`);
  html2pdf().from(element).save(`Report_${reportId}.pdf`);
};
Wrap Report Canvas in a PDF-friendly div:

jsx
Copiar
Editar
<div id={`report-${report.id}`} className="pdf-wrapper">
  {/* Full Report Content */}
</div>
âœ… 3. Export as CSV
This depends on whether the data is structured (e.g. tables). Assuming you have tables (e.g. sales data):

jsx
Copiar
Editar
const exportToCSV = (reportData, reportName) => {
  const headers = Object.keys(reportData[0]).join(",");
  const rows = reportData.map((row) => Object.values(row).join(",")).join("\n");
  const csv = `${headers}\n${rows}`;

  const blob = new Blob([csv], { type: "text/csv" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = `${reportName}.csv`;
  link.click();
};
Call this with:

js
Copiar
Editar
<Button onClick={() => exportToCSV(report.data, report.name)}>Export CSV</Button>
âœ… 4. Delete Report
Backend:

js
Copiar
Editar
// DELETE /api/reports/:id
router.delete("/api/reports/:id", async (req, res) => {
  const { id } = req.params;
  await pool.query("DELETE FROM reports WHERE id = $1", [id]);
  res.status(200).json({ message: "Deleted" });
});
Frontend:

jsx
Copiar
Editar
const deleteReport = async (id) => {
  await fetch(`/api/reports/${id}`, { method: "DELETE" });
  refetchReports(); // refresh state
};
ðŸ’¡ Bonus: Action Dropdown Menu (UI)
jsx
Copiar
Editar
<Menu>
  <Menu.Item onClick={() => setPreviewReport(report)}>Preview</Menu.Item>
  <Menu.Item onClick={() => handleDownloadPDF(report.id)}>Download PDF</Menu.Item>
  <Menu.Item onClick={() => exportToCSV(report.data, report.name)}>Export CSV</Menu.Item>
  <Menu.Item onClick={() => deleteReport(report.id)}>Delete</Menu.Item>
</Menu>