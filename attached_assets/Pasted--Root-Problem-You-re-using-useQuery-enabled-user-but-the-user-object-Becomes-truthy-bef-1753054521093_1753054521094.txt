ðŸš¨ Root Problem
You're using useQuery({ enabled: !!user }), but the user object:

Becomes truthy before Firebase finishes refreshing the auth token

Therefore, your getAuthHeaders() function may be building auth headers using stale localStorage data, not the fresh user.uid or token

This is causing the wrong UID to be sent to /api/user/profile, especially when switching users quickly.

âœ… Solution: Delay Query Until Firebase Token Is Fresh
You need to ensure the query (and any sensitive fetch) only runs after:

Firebase's onAuthStateChanged() is complete

The Firebase ID token is freshly fetched using getIdToken()

The result is safely injected into Authorization headers or context

ðŸ”§ Fix Strategy (Step-by-Step)
âœ… 1. Patch getAuthHeaders() to use Firebase ID token ONLY (no localStorage fallback)
ts
Copiar
Editar
import { auth } from "../firebase";

export const getAuthHeaders = async () => {
  const currentUser = auth.currentUser;

  if (!currentUser) {
    throw new Error("User not authenticated");
  }

  const token = await currentUser.getIdToken(true); // Force refresh
  return {
    Authorization: `Bearer ${token}`,
  };
};
âœ… 2. In your useQuery, use a second state: authReady
ts
Copiar
Editar
import { useEffect, useState } from "react";
import { auth } from "../firebase";

const useAuthReady = () => {
  const [authReady, setAuthReady] = useState(false);

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(async (user) => {
      if (user) {
        await user.getIdToken(true); // force token refresh
        setAuthReady(true);
      } else {
        setAuthReady(false);
      }
    });

    return () => unsubscribe();
  }, []);

  return authReady;
};
âœ… 3. Update your useQuery calls to wait for authReady
ts
Copiar
Editar
const authReady = useAuthReady();
const { user } = useAuth();

const { data: profile } = useQuery({
  queryKey: ["/api/user/profile"],
  enabled: !!user && authReady, // Only fire when both are truthy
  queryFn: async () => {
    const headers = await getAuthHeaders();
    const res = await fetch("/api/user/profile", {
      headers,
    });
    return res.json();
  },
});
ðŸ§ª Bonus: Log whatâ€™s going wrong during the race
For debugging, add this to catch unexpected UID mismatches:

ts
Copiar
Editar
useEffect(() => {
  const check = async () => {
    const user = auth.currentUser;
    if (user) {
      const token = await user.getIdToken();
      const decodedToken = JSON.parse(atob(token.split('.')[1]));
      console.log("Firebase UID:", decodedToken.user_id);
    }

    const cached = localStorage.getItem("uid");
    console.log("Cached UID:", cached);
  };
  check();
}, []);
ðŸ§¼ Clean-Up Reminder
Ensure you:

Never fetch user info or protected data from localStorage

Only store display-only or low-sensitivity info there

Treat Firebase as the single source of truth