Replace Mock Data with Real API Data in Dashboard Chart
Objective:
Replace the mock dataset used in the Sales Performance chart on the Dashboard with real-time data pulled from the backend, using actual sales records logged in the inventory & analytics system.

Steps to Implement:

Create/Verify Backend API Route:

Ensure the backend exposes an endpoint like this:

http
Copiar
Editar
GET /api/analytics/dashboard-summary?range=daily|weekly|monthly
Example JSON Response:

json
Copiar
Editar
{
  "salesData": [
    { "date": "2025-07-21", "revenue": 14300, "profit": 5600 },
    { "date": "2025-07-22", "revenue": 16780, "profit": 6350 },
    ...
  ],
  "summary": {
    "totalRevenue": 116700,
    "totalProfit": 29640,
    "totalUnitsSold": 394
  }
}
Update Frontend State Logic:

Replace the mock salesChartData array with a real-time fetch:

js
Copiar
Editar
useEffect(() => {
  async function fetchSalesChartData() {
    const res = await fetch('/api/analytics/dashboard-summary?range=weekly');
    const data = await res.json();
    setChartData(data.salesData);
    setRevenue(data.summary.totalRevenue);
    setProfit(data.summary.totalProfit);
    setUnits(data.summary.totalUnitsSold);
  }
  fetchSalesChartData();
}, []);
Feed Data to Chart Component:

Update the <LineChart /> or <ChartJS /> component to use chartData from API:

jsx
Copiar
Editar
<Line data={chartData} />
Or for Recharts:

jsx
Copiar
Editar
<LineChart data={chartData}>...</LineChart>
Ensure Filters Are Functional:

Allow switching between Daily / Weekly / Monthly tabs to dynamically update the range param in the API request.

jsx
Copiar
Editar
const handleRangeChange = (range) => {
  fetch(`/api/analytics/dashboard-summary?range=${range}`);
};
✅ Result:

Chart will now show live weekly performance

Revenue, profit, and units sold totals will match the actual log

Graph will respond to time toggle changes (daily, weekly, monthly)

Let me know if you want me to generate the backend API logic, controller function, or database query needed for this change.








Dijiste:
make all three


ChatGPT dijo:
Perfect! Below is the full implementation stack for making the Dashboard Sales Performance chart work with real data, including:

✅ Backend API Route

🧠 Controller Function

🗃️ Database Query (PostgreSQL example)

📁 1. Backend API Route (Express + ES6)
Create this route file in backend/routes/analyticsRoutes.js:

js
Copiar
Editar
import express from 'express';
import { getDashboardSummary } from '../controllers/analyticsController.js';

const router = express.Router();

// GET /api/analytics/dashboard-summary
router.get('/dashboard-summary', getDashboardSummary);

export default router;
And mount it in backend/server.js (or app.js):

js
Copiar
Editar
import analyticsRoutes from './routes/analyticsRoutes.js';
app.use('/api/analytics', analyticsRoutes);
🧠 2. Controller Function (analyticsController.js)
js
Copiar
Editar
import { getSalesSummaryByRange } from '../models/analyticsModel.js';

export const getDashboardSummary = async (req, res) => {
  try {
    const { range = 'weekly' } = req.query;

    const salesData = await getSalesSummaryByRange(range);

    const totalRevenue = salesData.reduce((sum, item) => sum + item.revenue, 0);
    const totalProfit = salesData.reduce((sum, item) => sum + item.profit, 0);
    const totalUnitsSold = salesData.reduce((sum, item) => sum + item.units, 0);

    res.json({
      salesData,
      summary: {
        totalRevenue,
        totalProfit,
        totalUnitsSold,
      }
    });
  } catch (error) {
    console.error('Error fetching dashboard summary:', error.message);
    res.status(500).json({ message: 'Internal server error' });
  }
};
🗃️ 3. Database Query (PostgreSQL via analyticsModel.js)
js
Copiar
Editar
import pool from '../config/db.js';

export const getSalesSummaryByRange = async (range) => {
  let groupBy;
  switch (range) {
    case 'daily':
      groupBy = "DATE(sale_date)";
      break;
    case 'monthly':
      groupBy = "DATE_TRUNC('month', sale_date)";
      break;
    case 'weekly':
    default:
      groupBy = "DATE_TRUNC('week', sale_date)";
      break;
  }

  const query = `
    SELECT 
      ${groupBy} AS date,
      SUM(units_sold) AS units,
      SUM(units_sold * unit_price) AS revenue,
      SUM(units_sold * cost_price) AS cost,
      SUM((units_sold * unit_price) - (units_sold * cost_price)) AS profit
    FROM sales
    GROUP BY date
    ORDER BY date;
  `;

  const { rows } = await pool.query(query);
  return rows.map(row => ({
    date: row.date,
    units: parseInt(row.units),
    revenue: parseFloat(row.revenue),
    profit: parseFloat(row.profit),
  }));
};
🧪 Sample Data Structure (sales table)
Make sure your sales table includes at least:

sql
Copiar
Editar
CREATE TABLE sales (
  id SERIAL PRIMARY KEY,
  sku TEXT,
  product_name TEXT,
  sale_date DATE,
  units_sold INT,
  unit_price NUMERIC,
  cost_price NUMERIC
);
