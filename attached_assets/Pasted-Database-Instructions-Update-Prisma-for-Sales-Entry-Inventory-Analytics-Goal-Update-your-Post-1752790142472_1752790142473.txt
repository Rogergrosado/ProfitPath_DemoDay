Database Instructions: Update Prisma for Sales Entry + Inventory Analytics

‚úÖ Goal:
Update your PostgreSQL schema (via Prisma) to support:

Manual sales entries

Analytics tied to date ranges

Inventory-linked performance metrics (e.g. lead time, daily sales, etc.)

üß© 1. Ensure your Prisma schema is up to date
Your schema already includes the following relevant models:

InventoryItem ‚Üí ‚úÖ Has fields:
prisma
Copiar c√≥digo
leadTimeDays              Int?
supplierPerformanceRating Float?
quantity                  Int
price                     Float
cost                      Float
SalesEntry ‚Üí ‚úÖ Already defined:
prisma
Copiar c√≥digo
model SalesEntry {
  id          String        @id @default(cuid())
  userId      String
  inventoryId String
  unitsSold   Int
  date        DateTime      @default(now())
  notes       String?
  user        User          @relation(fields: [userId], references: [id])
  inventory   InventoryItem @relation(fields: [inventoryId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId, date])
  @@index([inventoryId])
}
üÜó No schema changes needed right now! ‚úÖ

üõ†Ô∏è 2. Run Prisma Migration to Apply Schema to DB
Open terminal at your backend root (/backend) and run:

bash
Copiar c√≥digo
npx prisma migrate dev --name add-sales-entry-and-inventory-fields
This will:

Push SalesEntry & leadTimeDays, supplierPerformanceRating, etc. to your PostgreSQL database

Generate a new SQL migration file for version control

üß™ 3. Test the Connection to Database
Run the Prisma Studio UI to visually inspect your tables:

bash
Copiar c√≥digo
npx prisma studio
Then:

Navigate to InventoryItem ‚Üí Ensure new fields exist

Navigate to SalesEntry ‚Üí Test adding a new row manually

üìä 4. Seed Data (Optional) for Testing
If you want to seed initial test inventory + sales entries, you can create a prisma/seed.ts file:

ts
Copiar c√≥digo
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const user = await prisma.user.findFirstOrThrow()

  const item = await prisma.inventoryItem.create({
    data: {
      userId: user.id,
      title: "Bluetooth Speaker",
      sku: "BTS-2024-001",
      category: "Electronics",
      price: 50,
      cost: 25,
      quantity: 100,
      leadTimeDays: 14,
    },
  })

  await prisma.salesEntry.create({
    data: {
      userId: user.id,
      inventoryId: item.id,
      unitsSold: 5,
      date: new Date(),
      notes: "Initial test entry",
    },
  })
}

main().finally(() => prisma.$disconnect())
Run with:

bash
Copiar c√≥digo
npx ts-node prisma/seed.ts
